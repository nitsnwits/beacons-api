#%RAML 0.8
title: Salesman
version: v1
baseUri: http://salesman-betasjsu.rhcloud.com/api/{version}

documentation: 
  - title: Salesman Backend API's
    content: | 
      Salesman - Powering the In-Store Shopping Experience Prototype
  
schemas:
  - BadRequest: |
      {
        "status": "error",
        "errorCode": 400,
        "errorMessage": "Bad Request"
      }
  - NotFound: |
      {
        "status": "error",
        "errorCode": 404,
        "errorMessage": "Not Found"
      }
  - Unauthorized: |
      {
        "status": "error",
        "errorCode": 401,
        "errorMessage": "Unauthorized"
      }
  - InternalServerError: |
      {
        "status": "error",
        "errorCode": 500,
        "errorMessage": "Internal Server Error"
      }
  - ServiceUnavailable: |
      {
        "status": "error",
        "errorCode": 503,
        "errorMessage": "Service Unavailable"
      }

/auth:
  post:
    description: Login to salesman and retrieve access tokens
    body:
      application/json:
        example: |
          {
            'email': 'Test.User@test.com',
            'passsword': 'TestPassword123'
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "updated": 1434607925152,
                "created": 1434607502058,
                "userId": "e397ff6d-6b26-4f4f-9ed1-92fc672e2397",
                "accessToken": "e13388d4-9a39-4cd3-bda0-96221c43f0fb",
                "name": {
                  "first": "neeraj",
                  "last": "sharma"
                },
                "email": "nitsnwits@gmail.com",
                "verified": true
              }
      400:
        body:
          application/json:
            schema: BadRequest
      401:
        body:
          application/json:
            schema: Unauthorized
      404:
        body:
          application/json:
            schema: NotFound
      500:
        body:
          application/json:
            schema: InternalServerError
      503:
        body:
          application/json:
            schema: ServiceUnavailable

  /reset/password:
    post:
      description: Reset a user's password, sends e-mail to a user if the user is verified
      body:
        application/json:
          example: |
            {
              "email": "nitsnwits@gmail.com"
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "url": "http://salesman-betasjsu.rhcloud.com/api/v1/reset/password/d7a6c474-61de-40e3-b1f3-3c232ea5621e"
                }
                {                
                  "message": "Please verify your e-mail before resetting your password."
                }
        400:
          body:
            application/json:
              schema: BadRequest
        401:
          body:
            application/json:
              schema: Unauthorized
        404:
          body:
            application/json:
              schema: NotFound
        500:
          body:
            application/json:
              schema: InternalServerError
        503:
          body:
            application/json:
              schema: ServiceUnavailable

  /reset/password/{key}:
    get:
      description: Hit the link/url received in reset password api and system will send a new password to user
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  message: "Your new password has been e-mailed to you."
                }               
        400:
          body:
            application/json:
              schema: BadRequest
        401:
          body:
            application/json:
              schema: Unauthorized
        404:
          body:
            application/json:
              schema: NotFound
        500:
          body:
            application/json:
              schema: InternalServerError
        503:
          body:
            application/json:
              schema: ServiceUnavailable              

/users:
  post:
    description: Create a new user or signup
    body:
      application/json:
        example: |
          {
              "name": {
                  "first": "test1",
                  "last": "sharma"
              },
              "password": "abcd",
              "email": "test1@gmail.com"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "updated": 1434609990866,
                "created": 1434607502058,
                "userId": "e397ff6d-6b26-4f4f-9ed1-92fc672e2397",
                "accessToken": "e13388d4-9a39-4cd3-bda0-96221c43f0fb",
                "name": {
                  "first": "neeraj",
                  "last": "sharma"
                },
                "email": "nitsnwits@gmail.com",
                "verified": true
              }
      400:
        body:
          application/json:
            schema: BadRequest
      401:
        body:
          application/json:
            schema: Unauthorized
      404:
        body:
          application/json:
            schema: NotFound
      500:
        body:
          application/json:
            schema: InternalServerError
      503:
        body:
          application/json:
            schema: ServiceUnavailable
  /{userId}:
    get:
      description: Get the details of a user
      headers:
        Authorization:
          description: Use access token as value to Authorization header
          type: string
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "updated": 1434609990866,
                  "created": 1434607502058,
                  "userId": "e397ff6d-6b26-4f4f-9ed1-92fc672e2397",
                  "accessToken": "e13388d4-9a39-4cd3-bda0-96221c43f0fb",
                  "name": {
                    "first": "neeraj",
                    "last": "sharma"
                  },
                  "email": "nitsnwits@gmail.com",
                  "verified": true
                }           
        400:
          body:
            application/json:
              schema: BadRequest
        401:
          body:
            application/json:
              schema: Unauthorized
        404:
          body:
            application/json:
              schema: NotFound
        500:
          body:
            application/json:
              schema: InternalServerError
        503:
          body:
            application/json:
              schema: ServiceUnavailable
    put:
      description: Change details of a user, A user can only change his name
      headers:
        Authorization:
          description: Use access token as value to Authorization header
          type: string      
      body:
        application/json:
          example: |
            {
                "name": {
                    "first": "neerajUpdate"
                }
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "updated": 1434698488362,
                  "created": 1434643253341,
                  "userId": "25d1be1b-c34c-4393-b8b8-8f28c9d238fc",
                  "accessToken": "3366d96a-b137-47ae-a807-424fdac82fcf",
                  "name": {
                    "first": "neerajUpdate",
                    "last": "sharma"
                  },
                  "email": "nitsnwits@gmail.com",
                  "verified": true
                }             
        400:
          body:
            application/json:
              schema: BadRequest
        401:
          body:
            application/json:
              schema: Unauthorized
        404:
          body:
            application/json:
              schema: NotFound
        500:
          body:
            application/json:
              schema: InternalServerError
        503:
          body:
            application/json:
              schema: ServiceUnavailable
    delete:
      description: Delete a user
      headers:
        Authorization:
          description: Use access token as value to Authorization header
          type: string      
      body:
        application/json:
          example: |
            {
              "code": "Are you sure you want to delete this user?"
            }
      responses:
        204:
          description: |
            Successfully deleted resource(s)
        400:
          body:
            application/json:
              schema: BadRequest
        401:
          body:
            application/json:
              schema: Unauthorized
        404:
          body:
            application/json:
              schema: NotFound
        500:
          body:
            application/json:
              schema: InternalServerError
        503:
          body:
            application/json:
              schema: ServiceUnavailable
    /verify:
      get:
        description: Verify a user's e-mail using the link received in the e-mail
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    message: "Your e-mail has been verified."
                  }
          400:
            body:
              application/json:
                schema: BadRequest
          401:
            body:
              application/json:
                schema: Unauthorized
          404:
            body:
              application/json:
                schema: NotFound
          500:
            body:
              application/json:
                schema: InternalServerError
          503:
            body:
              application/json:
                schema: ServiceUnavailable                               
    /password:
      put:
        description: Change a user's password only
        headers:
          Authorization:
            description: Use access token as value to Authorization header
            type: string        
        body:
          application/json:
            example: |
              {
                  "password": "new"
              }
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "updated": 1434698612808,
                    "created": 1434643253341,
                    "userId": "25d1be1b-c34c-4393-b8b8-8f28c9d238fc",
                    "accessToken": "3366d96a-b137-47ae-a807-424fdac82fcf",
                    "name": {
                      "first": "neeraj",
                      "last": "sharma"
                    },
                    "email": "nitsnwits@gmail.com",
                    "verified": true
                  }
          400:
            body:
              application/json:
                schema: BadRequest
          401:
            body:
              application/json:
                schema: Unauthorized
          404:
            body:
              application/json:
                schema: NotFound
          500:
            body:
              application/json:
                schema: InternalServerError
          503:
            body:
              application/json:
                schema: ServiceUnavailable

    /photo:
      post:
        description: Upload a photo for a user
        headers:
          Authorization:
            description: Use access token as value to Authorization header
            type: string        
        body:
          image/png:
            example: |
              binary data 
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                      "accessToken": "21c38d35-fc34-47ee-85ab-85b642c75f35",
                      "created": 1435103947216,
                      "email": "test@gmail.com",
                      "name": {
                          "first": "neeraj",
                          "last": "sharma"
                      },
                      "photo": "http://s3.amazonaws.com/Salesman-Photos/0a7dbd89-4904-4a83-b6d5-897a9c44c89b",
                      "updated": 1435112835266,
                      "userId": "0a7dbd89-4904-4a83-b6d5-897a9c44c89b"
                  }
          400:
            body:
              application/json:
                schema: BadRequest
          401:
            body:
              application/json:
                schema: Unauthorized
          404:
            body:
              application/json:
                schema: NotFound
          500:
            body:
              application/json:
                schema: InternalServerError
          503:
            body:
              application/json:
                schema: ServiceUnavailable
    /history:
      get:
        description: Get shopping history of a user
        responses:
          200:
            body:
              application/json:
                example: |
                  [
                    {
                      'productId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607',
                      'productName': 'Mens Shoes',
                      'categoryId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607',
                      'brand': 'Puma',
                      'weight': '1/2 pounds',
                      'size': '9',
                      'listedPrice': 199,
                      'standardPrice': 399,
                      'color': 'blue',
                      'purchasedOn': 1434147513
                    }
                  ]
          400:
            body:
              application/json:
                schema: BadRequest
          401:
            body:
              application/json:
                schema: Unauthorized
          404:
            body:
              application/json:
                schema: NotFound
          500:
            body:
              application/json:
                schema: InternalServerError
          503:
            body:
              application/json:
                schema: ServiceUnavailable

/section:
  post:
    description: Create a section
    body:
      application/json:
        example: |
          {
            'sectionName': 'Aisle 4'
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                'sectionName': 'Aisle 4',
                'sectionId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607'
              }
      400:
        body:
          application/json:
            schema: BadRequest
      401:
        body:
          application/json:
            schema: Unauthorized
      404:
        body:
          application/json:
            schema: NotFound
      500:
        body:
          application/json:
            schema: InternalServerError
      503:
        body:
          application/json:
            schema: ServiceUnavailable
  /{sectionId}:
    get:
      description: Get details of a section
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  'sectionName': 'Aisle 4',
                  'sectionId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607'
                }
        400:
          body:
            application/json:
              schema: BadRequest
        401:
          body:
            application/json:
              schema: Unauthorized
        404:
          body:
            application/json:
              schema: NotFound
        500:
          body:
            application/json:
              schema: InternalServerError
        503:
          body:
            application/json:
              schema: ServiceUnavailable      
    put:
      description: Change details of a section
      body:
        application/json:
          example: |
            {
              'sectionName': 'Aisle 7'
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  'sectionName': 'Aisle 7',
                  'sectionId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607'
                }
        400:
          body:
            application/json:
              schema: BadRequest
        401:
          body:
            application/json:
              schema: Unauthorized
        404:
          body:
            application/json:
              schema: NotFound
        500:
          body:
            application/json:
              schema: InternalServerError
        503:
          body:
            application/json:
              schema: ServiceUnavailable     
    delete:
      description: Delete a section
      responses:
        204:
         description: |
           Successfully deleted resource(s)
        400:
          body:
            application/json:
              schema: BadRequest
        401:
          body:
            application/json:
              schema: Unauthorized
        404:
          body:
            application/json:
              schema: NotFound
        500:
          body:
            application/json:
              schema: InternalServerError
        503:
          body:
            application/json:
              schema: ServiceUnavailable
    /categories:
      post:
        description: Create a category in a section
        body:
          application/json:
            example: |
              {
                'categoryName': 'Mens shoes'
              }
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    'categoryName': 'Mens shoes',
                    'categoryId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607'
                  }
          400:
            body:
              application/json:
                schema: BadRequest
          401:
            body:
              application/json:
                schema: Unauthorized
          404:
            body:
              application/json:
                schema: NotFound
          500:
            body:
              application/json:
                schema: InternalServerError
          503:
            body:
              application/json:
                schema: ServiceUnavailable
      get:
        description: Get all categories in a section
        responses:
          200:
            body:
              application/json:
                example: |
                  [
                    {
                      'categoryName': 'Mens shoes',
                      'categoryId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607'
                    }
                  ]
          400:
            body:
              application/json:
                schema: BadRequest
          401:
            body:
              application/json:
                schema: Unauthorized
          404:
            body:
              application/json:
                schema: NotFound
          500:
            body:
              application/json:
                schema: InternalServerError
          503:
            body:
              application/json:
                schema: ServiceUnavailable
      /{categoryId}:
        get:
          description: Get one category
          responses:
            200:
              body:
                application/json:
                  example: |
                    {
                      'categoryName': 'Mens shoes',
                      'categoryId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607'
                    }
            400:
              body:
                application/json:
                  schema: BadRequest
            401:
              body:
                application/json:
                  schema: Unauthorized
            404:
              body:
                application/json:
                  schema: NotFound
            500:
              body:
                application/json:
                  schema: InternalServerError
            503:
              body:
                application/json:
                  schema: ServiceUnavailable
        put:
          description: Change a category
          body:
            application/json:
              example: |
                {
                  'categoryName': 'Changed'
                }
          responses:
            200:
              body:
                application/json:
                  example: |
                    {
                      'categoryName': 'Changed',
                      'categoryId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607'
                    }
            400:
              body:
                application/json:
                  schema: BadRequest
            401:
              body:
                application/json:
                  schema: Unauthorized
            404:
              body:
                application/json:
                  schema: NotFound
            500:
              body:
                application/json:
                  schema: InternalServerError
            503:
              body:
                application/json:
                  schema: ServiceUnavailable
        delete:
          description: Delete a category from a section
          responses:
            204:
              description: |
                Successfully deleted resource(s)
            400:
              body:
                application/json:
                  schema: BadRequest
            401:
              body:
                application/json:
                  schema: Unauthorized
            404:
              body:
                application/json:
                  schema: NotFound
            500:
              body:
                application/json:
                  schema: InternalServerError
            503:
              body:
                application/json:
                  schema: ServiceUnavailable                  
/beacons:
  post:
    description: Create a new beacon in the system admin functionality
    body:
      application/json:
        example: |
          {
            'beaconId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607',
            'beaconName': 'Mens Shoes',
            'sectionId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607'
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                'beaconId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607',
                'beaconName': 'Mens Shoes',
                'dateInstalled': 1434146201
              }
      400:
        body:
          application/json:
            schema: BadRequest
      401:
        body:
          application/json:
            schema: Unauthorized
      404:
        body:
          application/json:
            schema: NotFound
      500:
        body:
          application/json:
            schema: InternalServerError
      503:
        body:
          application/json:
            schema: ServiceUnavailable
  /{beaconId}:
    get:
      description: Get details of a beacon
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  'beaconId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607',
                  'beaconName': 'Mens Shoes',
                  'dateInstalled': 1434146201
                }
        400:
          body:
            application/json:
              schema: BadRequest
        401:
          body:
            application/json:
              schema: Unauthorized
        404:
          body:
            application/json:
              schema: NotFound
        500:
          body:
            application/json:
              schema: InternalServerError
        503:
          body:
            application/json:
              schema: ServiceUnavailable
    delete:
      description: Delete a beacon from the system
      responses:
        204:
          description: |
            Successfully deleted resource(s)
        400:
          body:
            application/json:
              schema: BadRequest
        401:
          body:
            application/json:
              schema: Unauthorized
        404:
          body:
            application/json:
              schema: NotFound
        500:
          body:
            application/json:
              schema: InternalServerError
        503:
          body:
            application/json:
              schema: ServiceUnavailable         
    put:
      description: Change details of a beacon
      body:
        application/json:
          example: |
            {
              'beaconName': 'Womens shoes'
            } 
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  'beaconId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607',
                  'beaconName': 'Mens Shoes',
                  'dateInstalled': 1434146201
                }
        400:
          body:
            application/json:
              schema: BadRequest
        401:
          body:
            application/json:
              schema: Unauthorized
        404:
          body:
            application/json:
              schema: NotFound
        500:
          body:
            application/json:
              schema: InternalServerError
        503:
          body:
            application/json:
              schema: ServiceUnavailable
    /offers:
      get:
        description: Get offers by a beacon id 
        queryParameters:
          maxCount: 
        responses:
          200:
            body:
              application/json:
                example: |
                  [
                    {
                      'productId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607',
                      'productName': 'Mens Shoes',
                      'categoryId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607',
                      'brand': 'Puma',
                      'weight': '1/2 pounds',
                      'size': '9',
                      'listedPrice': 199,
                      'standardPrice': 399,
                      'color': 'blue'
                    }
                  ]
          400:
            body:
              application/json:
                schema: BadRequest
          401:
            body:
              application/json:
                schema: Unauthorized
          404:
            body:
              application/json:
                schema: NotFound
          500:
            body:
              application/json:
                schema: InternalServerError
          503:
            body:
              application/json:
                schema: ServiceUnavailable
/recommendations:
  get:
    description: Get offers based on recommendations based on shopping history
    queryParameters:
      maxCount: 
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  'productId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607',
                  'productName': 'Mens Shoes',
                  'categoryId': '8ad5e23c-828f-40f5-8a60-7fdc36e02607',
                  'brand': 'Puma',
                  'weight': '1/2 pounds',
                  'size': '9',
                  'listedPrice': 199,
                  'standardPrice': 399,
                  'color': 'blue'
                }
              ]
      400:
        body:
          application/json:
            schema: BadRequest
      401:
        body:
          application/json:
            schema: Unauthorized
      404:
        body:
          application/json:
            schema: NotFound
      500:
        body:
          application/json:
            schema: InternalServerError
      503:
        body:
          application/json:
            schema: ServiceUnavailable 
